Introduction to Mix
  # To build our key value application, we will use three main tools:
    # OTP (Open Telecom Platform) is a set of libraries that ships with Erlang. Erlang developers use OTP to create robust and fault-tolerant applications. In this chapter we will explore how many aspects of OTP are integrated with Elixir, including monitoring trees, event managers, and more;

    # is a build tool shipped with Elixir that provides tasks to build, compile, test your application, manage your dependencies, and much more;

    # ExUnit is a test unit-based framework that ships with Elixir

  # Let's create our first project by invoking mix new from the command line. We will pass the project path as an argument (kv, in this case). By default, the application name and module name will be retrieved from the path.

  # once you have the structure you can compile the project.
    mix compile
  # Once the project is compiled, you can initiate a session into the project by running.
    iex -S mix
  # While you can start a new session whenever there are changes to the project's source code, you can also recompile the project from within iex with the recompile wizard.
    recompile()                                                           #=> Compiling 1 file (.ex)  :ok
    recompile()                                                           #=> :noop

Running tests
  # Mix also generated the appropriate structure to run our project tests. Mixed projects generally follow the convention of having a <filename> _test.exs file in the testdirectory for every file in the libdirectory.
  # It's important to keep a couple of things in mind:
    # the test file is an Elixir script file (.exs). This is convenient because we don't need to compile test files before running them.
    # we define a test module called KVTest, in which it uses ExUnit.Case We inject the test API;
    # We use one of the imported macros, doctest / 1, to indicate that the KVmodule contains documentation tests (we will discuss these in a later chapter).
    # we use the test / 2macro to define a simple test.
  # Mix also generated a file called test / test_helper.exs which is responsible for configuring the test framework.
  # Mix will require this file every time we run our tests.
    # remember that this command does not go inside iex.
      mix test
  # If you copy the entire test location, including the file and line number, and add it to mix test, Mix will load and run only that particular test.
    mix test test/kv_test.exs:5

Environments
  # Mix provides the concept of "environments". They allow the developer to customize the build and other options for specific scenarios. By default, Mix comprises three environments.
    #: dev- the one in which Mix tasks (as compile) run by default.
    #: test - used by mix test.
    #: prod - the one you will use to run your project in production.
  # Mix will be set by default to the: deventorno, except for the testtask which will be used by default in the: test environment. The environment can be changed using the environment variable MIX_ENV.
    $ MIX_ENV=prod mix compile
  # Note that you can always invoke the helper task to list all available tasks
    mix help
  # You can get more information about a particular task by invoking.
    mix help TASK.

Module attributes
  # Los atributos del módulo en Elixir tienen tres propósitos.
    # Sirven para anotar el módulo, a menudo con información para ser utilizada por el usuario o la VM .
    # Funcionan como constantes.
    # Funcionan como un módulo de almacenamiento temporal que se utilizará durante la compilación.
  # Elixir brings the concept of module attributes from Erlang.
    defmodule MyServer do
      @moduledoc "My server code."
    end
  # Elixir has many reserved attributes. Here are some of them.
    # @moduledoc - provides documentation for the current module.
    # @doc - Provides documentation for the function or macro that follows the attribute.
    # @spec - Provides a type specification for the function that follows the attribute.
    # @ behavior- (note British spelling) used to specify an OTP or user-defined behavior.
  # Defining the math.ex function
    elixirc math.ex
    h Math                                                          #=> Access the docs for the module Math
    h Math.sum                                                      #=> Access the docs for the sum function

As “constants”
  # Elixir developers often use module attributes when they want to make a value more visible or reusable.
    defmodule MyServer do
      @initial_state %{host: "127.0.0.1", port: 3456}
      IO.inspect @initial_state
    end
  # Trying to access an attribute that was not defined will give a warning.
    defmodule MyServer do
      @unknown
    end
    warning: undefined module attribute @unknown, please remove access to
    @unknown or explicitly set it before access
  # Attributes can also be read within functions.
    defmodule MyServer do
      @my_data 14
      def first_data, do: @my_data
      @my_data 13
      def second_data, do: @my_data
    end

    MyServer.first_data                                                 #=> 14
    MyServer.second_data                                                #=> 13
  # Functions can be called by defining a module attribute.
    defmodule MyApp.Status do
      @service URI.parse("https://example.com")
      def status(email) do
        SomeHttpClient.get(@service)
      end
    end
  # The above function will be called at compile time and its return value, not the call to the function itself, is what will replace the attribute. So the above will effectively compile to this.
    defmodule MyApp.Status do
      def status(email) do
        SomeHttpClient.get(%URI{
          authority: "example.com",
          host: "example.com",
          port: 443,
          scheme: "https"
        })
      end
    end
  # Every time an attribute is read within a function, Elixir takes a snapshot of its current value. So if you read the same attribute multiple times within multiple functions, you may end up making multiple copies of it. Usually that's not a problem, but if you're using functions to calculate attributes of large modules, that can slow down compilation. The solution is to move the attribute to the shared function.
    # you can use this, but it is not convenient
      def some_function, do: do_something_with(@example)
      def another_function, do: do_something_else_with(@example)
    # It is better to use this.
      def some_function, do: do_something_with(example())
      def another_function, do: do_something_else_with(example())
      defp example, do: @example

Accumulating attributes
  # repeating a module attribute will cause its value to be reassigned, but there are circumstances where it is possible to configure the module attribute so that its values are accumulated.
    defmodule Foo do
      Module.register_attribute __MODULE__, :param, accumulate: true

      @param :foo
      @param :bar
      # here @param == [:bar, :foo]
    end

As temporary storage
  # ExUnit uses module attributes for multiple different purposes.
    defmodule MyTest do
      use ExUnit.Case, async: true

      @tag :external
      @tag os: :unix
      test "contacts external service" do
        # ...
      end
    end
  # You can define a structure that combines both fields with explicit default values and implicit nil values. The fields that are implicitly defaulted must first be specified as null.
    defmodule User do
      defstruct [:email, name: "John", age: 27]
    end
    %User{}                                                            #=> %User{age: 27, email: nil, name: "John"}
  # Since doing it in reverse will generate a syntax error.
    defmodule User do
      defstruct [name: "John", age: 27, :email]
    end
      #=> ** (SyntaxError) iex:107: syntax error before: email
  # You can also require that certain keys be specified when creating the structure.
    defmodule Car do
      @enforce_keys [:make]
      defstruct [:model, :make]
    end
    %Car{}
      #=> ** (ArgumentError) the following keys must also be given when building struct Car: [:make]
    expanding struct: Car.__struct__/1

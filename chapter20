Typespecs and behaviours

Types and specs
  # Elixir is a dynamically written language, so all types in Elixir are checked at runtime. However, Elixir does come with typepecs, which is a notation used for.
    # declare signatures of typed functions (also called specifications);
    # declaring custom types.

Function specifications
  # Elixir provides many built-in types, such as integer pid, that can be used to document function signatures.
    round(number()) :: integer()
  # The syntax is to put the function and its input on the left side of the :: and the type of the return value on the right side.
  # In code, the function specifications are written with the @specaattribute, which is usually placed immediately before the function definition.
  # Type specifications (sometimes known as typespecs) are defined in different contexts using the following attributes.
    @type
    @opaque
    @typep
    @spec
    @callback
    @macrocallback
  # Example.
    defmodule StringHelpers do
      @type word() :: String.t()

      @spec long_word?(word()) :: boolean()
      def long_word?(word) when is_binary(word) do
        String.length(word) > 8
      end
    end

Defining custom types
  # Defining custom types can help communicate the intent of your code and increase its readability.
  # Custom types can be defined within modules through the @type attribute.
    defmodule Person do
      @typedoc """
      A 4 digit year, e.g. 1984
      """
      @type year :: integer

      @spec current_age(year) :: integer
      def current_age(year_of_birth), do: # implementation
    end
  # The @typedoc attribute, similar to the @docy @moduledoc attributes, is used to document custom types.
  # You can define compound custom types.
    @type error_map :: %{
      message: String.t,
      line_number: integer
    }
  # Another example
    defmodule LousyCalculator do
      @spec add(number, number) :: {number, String.t}
      def add(x, y), do: {x + y, "You need a calculator to do that?!"}

      @spec multiply(number, number) :: {number, String.t}
      def multiply(x, y), do: {x * y, "Jeez, come on!"}
    end
  # Tuples are a composite type, and each tuple is identified by the types it contains.
  # Defining function specifications this way works, but we end up repeating the type {number, String.t} over and over again.
  # We can use the @typeattribute to declare our own custom type and reduce repetition.
    defmodule LousyCalculator do
      @typedoc """
      Just a number followed by a string.
      """
      @type number_with_remark :: {number, String.t}

      @spec add(number, number) :: number_with_remark
      def add(x, y), do: {x + y, "You need a calculator to do that?"}

      @spec multiply(number, number) :: number_with_remark
      def multiply(x, y), do: {x * y, "It is like addition on steroids."}
    end
  # Custom types defined using @type are exported and available outside of the module in which they are defined.
    defmodule QuietCalculator do
      @spec add(number, number) :: number
      def add(x, y), do: make_quiet(LousyCalculator.add(x, y))

      @spec make_quiet(LousyCalculator.number_with_remark) :: number
      defp make_quiet({num, _remark}), do: num
    end
  # If you want to keep a custom type private, you can use the @typep attribute instead of @type.

Behaviours
  # Many modules share the same public API, it is a specification for composable modules in web applications. Each socket is a module that must implement at least two public functions: init and call.
  # Behaviors provide a way to:
    # define a set of functions that must be implemented by a module.
    # make sure a module implements all the functions of that set.

Defining behaviours
  # We can create a Parser behavior.
    defmodule Parser do
      @doc """
      Parses a string.
      """
      @callback parse(String.t) :: {:ok, term} | {:error, String.t}

      @doc """
      Lists all supported file extensions.
      """
      @callback extensions() :: [String.t]
    end
  # The modules that adopt the Parser behavior must implement all the functions defined with the @callback.

Adopting behaviours
  # Adopting a behavior is simple.
    defmodule JSONParser do
      @behaviour Parser

      @impl Parser
      def parse(str), do: {:ok, "some json " <> str} # ... parse JSON

      @impl Parser
      def extensions, do: ["json"]
    end
  # If a module that adopts a certain behavior does not implement one of the callbacks required by that behavior, a compile-time warning will be generated.
  # Also, with @ impl you can also make sure that you are implementing the correct callbacks of the explicitly given behavior.
    defmodule BADParser do
      @behaviour Parser

      @impl Parser
      def parse, do: {:ok, "something bad"}

      @impl Parser
      def extensions, do: ["bad"]
    end

Dynamic dispatch
  # Behaviors are frequently used with dynamic shipping.
    defmodule Parser do
      @callback parse(String.t) :: {:ok, term} | {:error, String.t}
      @callback extensions() :: [String.t]

      def parse!(implementation, contents) do
        case implementation.parse(contents) do
          {:ok, data} -> data
          {:error, error} -> raise ArgumentError, "parsing error: #{error}"
        end
      end
    end
  # Note that you do not need to define a behavior to dynamically distribute in a module, but those characteristics often go hand in hand.
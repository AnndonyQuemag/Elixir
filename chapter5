case, cond, and if
  # case lets you compare a value with many patterns until we find a matching one.
    case {1, 2, 3} do
    ...>   {4, 5, 6} ->
    ...>     "This clause won't match"
    ...>   {1, x, 3} ->
    ...>     "This clause will match and bind x
              to 2 in this clause"
    ...>   _ ->
    ...>     "This clause would match any value"
    ...> end                                           # "This clause will match and bind x to 2 in this clause"
  # If you want to match the pattern to an existing variable, you must use the ^ operator.
    x = 1                                   # 1
    case 10 do
    ...>   ^x -> "Won't match"
    ...>   _ -> "Will match"
    ...> end                                # "Will match"
  # Clauses also allow you to specify additional conditions through protections.
    case {1, 2, 3} do
    ...>   {1, x, 3} when x > 0 ->
    ...>     "Will match"
    ...>   _ ->
    ...>     "Would match, if guard condition were not satisfied"
    ...> end                                                                  # "Will match"
  # Errors in protections are not filtered out, they simply cause the protection to fail.
    hd(1)                                                         # ** (ArgumentError) argument error
    iex> case 1 do
    ...>   x when hd(x) -> "Won't match"
    ...>   x -> "Got #{x}"
    ...> end                                                      # "Got 1"
  # If none of the clauses match, an error is generated
    case :ok do
    ...>   :error -> "Won't match"
    ...> end                                                      # ** (CaseClauseError) no case clause matching: :ok
  # Anonymous functions can also have various clauses and protections.
    f = fn
    ...>   x, y when x > 0 -> x + y
    ...>   x, y -> x * y
    ...> end
    f.(1, 3)                                                      # 4
    f.(-1, 3)                                                     # -3
  # The number of arguments in each anonymous function clause must be the same; otherwise, an error is generated.
    f2 = fn
    ...>   x, y when x > 0 -> x + y
    ...>   x, y, z -> x * y + z
    ...> end                          # ** (CompileError) iex:1: cannot mix clauses with different arities in anonymous functions

cond
  # In many circumstances, we want to check different conditions and find the first one that does not evaluate to nile false. In such cases, cond can be used.
    cond do
    ...>   2 + 2 == 5 ->
    ...>     "This will not be true"
    ...>   2 * 2 == 3 ->
    ...>     "Nor this"
    ...>   1 + 1 == 2 ->
    ...>     "But this will"
    ...> end                                                                      # "But this will"
  # This is equivalent to else ifclauses in many imperative languages, although it is used less frequently in Elixir.
  # If all conditions return nile false, an error is generated (CondClauseError). For this reason, it may be necessary to add a final condition, equal to true, which will always match.
    cond do
    ...>   2 + 2 == 5 ->
    ...>     "This is never true"
    ...>   2 * 2 == 3 ->
    ...>     "Nor this"
    ...>   true ->
    ...>     "This is always true (equivalent to else)"
    ...> end                                                                      # "This is always true (equivalent to else)"
  # cond considers any value other than nily false to be true.
    cond do
    ...>   hd([1, 2, 3]) ->
    ...>     "1 is considered as true"
    ...> end                                                                      # "1 is considered as true"

if y unless
  # Elixir also provides if and unless macros which are useful when you need to check only one condition.
    if true do
    ...>   "This works!"
    ...> end                                                                      # "This works!"

    unless true do
    ...>   "This will never be seen"
    ...> end                                                                      # nil
  # If the condition given to if returns false or nil, the body given between do / end is not executed and returns nil instead. The opposite is the case with unless
  # They also support else blocks.
    if nil do
    ...>   "This won't be seen"
    ...> else
    ...>   "This will"
    ...> end                                                                      # "This will"
  # If any variable is declared or changed within if, case, and similar constructs, the declaration and change will only be visible within the construct.
    x = 1                                                                         # 1
    if true do
    ...>   x = x + 1
    ...> end                                                                      # 2
    x                                                                             # 1
  # In such cases, if you want to change a value, you must return the value of if.
    x = 1                                                                         # 1
    x = if true do
    ...>   x + 1
    ...> else
    ...>   x
    ...> end                                                                      # 2

do/end bloques
  # you can also write if with the following syntax.
    if true, do: 1 + 2                                                            # 3
    if false, do: :this, else: :that                                              # :that
  # Notice how the example above has a comma between true and do :, that's because you're using regular Elixir syntax where each argument is separated by a comma. We say that this syntax uses keyword lists.

  # The do / end blocks are a syntactic convenience built on top of keywords. This is why do / endblocks do not require a comma between the above argument and the block
    if true do
    ...>   a = 1 + 2
    ...>   a + 10
    ...> end                                                                      # 13

    if true, do: (
    ...>   a = 1 + 2
    ...>   a + 10
    ...> )                                                                        # 13
  # Keyword lists play an important role in the language and are quite common in many functions and macros

Keyword lists and maps
  # In Elixir, we have two main associative data structures: keyword lists and maps.

Keyword lists
  # when we have a list of tuples and the first element of the tuple (i.e. the key) is an atom, we call it a keyword list
  list = [{:a, 1}, {:b, 2}]                                               # [a: 1, b: 2]
  list == [a: 1, b: 2]                                                    # true
  # we can use all available operations for lists. For example, we can use ++ to add new values to a list of keywords.
    list ++ [c: 3]                                                          # [a: 1, b: 2, c: 3]
    [a: 0] ++ list                                                          # [a: 0, a: 1, b: 2]
  # Note that the values added to the front are what you get from the search.
    new_list = [a: 0] ++ list                                               # [a: 0, a: 1, b: 2]
    new_list[:a]                                                            # 0
  # Keyword lists are important because they have three special characteristics:
    # The keys must be atoms.
     # Keys are ordered, as specified by the developer.
     # Keys can be handed over more than once.
  # For example, the Ecto library makes use of these features to provide an elegant DSL for writing database queries.
    query =
      from w in Weather,
        where: w.prcp > 0,
        where: w.temp < 20,
        select: w
  # The do: and else: pairs form a list of keywords. In fact, the following lines of code are equivalent.
    if false, do: :this, else: :that                                        # :that
    if(false, [do: :this, else: :that])                                     # :that
    if(false, [{:do, :this}, {:else, :that}])                               # :that
  # Although you can pattern matching in keyword lists, it is rarely done in practice, as pattern matching in lists requires the number of items and their order to match.
    [a: a] = [a: 1]                                                         # [a: 1]
    a                                                                       # 1
    [a: a] = [a: 1, b: 2]                                                   # ** (MatchError) no match of right hand side value: [a: 1, b: 2]
    [b: b, a: a] = [a: 1, b: 2]                                             # ** (MatchError) no match of right hand side value: [a: 1, b: 2]

Maps
  # keyword lists are used in Elixir primarily to pass optional values. If you need to store many items or guarantee single-key associates with a maximum value, you should use maps instead.
  # Whenever you need a key-value store, maps are the data structure to "go to" in Elixir. A map is created using the% {} syntax.
    map = %{:a => 1, 2 => :b}                                               # %{2 => :b, :a => 1}
    map[:a]                                                                 # 1
    map[2]                                                                  # :b
    map[:c]                                                                 # nil
  # Compared to keyword lists, we can already see two differences:
     # Maps allow any value as a key.
     # Maps keys do not follow any order.
  # Unlike keyword lists, maps are very useful with pattern matching. When using a map in a pattern, it will always match on a subset of the given value.
    %{} = %{:a => 1, 2 => :b}                                               # %{2 => :b, :a => 1}
    %{:a => a} = %{:a => 1, 2 => :b}                                        # %{2 => :b, :a => 1}
    a                                                                       # 1
    %{:c => c} = %{:a => 1, 2 => :b}                                        # ** (MatchError) no match of right hand side value: %{2 => :b, :a => 1}
      # A map matches as long as the pattern keys exist on the given map. Therefore an empty map matches all maps.
  # Variables can be used when accessing, matching, and adding map keys.
    n = 1                                                                   # 1
    map = %{n => :one}                                                      # %{1 => :one}
    map[n]                                                                  # :one
    %{^n => :one} = %{1 => :one, 2 => :two, 3 => :three}                    # %{1 => :one, 2 => :two, 3 => :three}
  # The Map module provides an API very similar to the Keyword module with convenience functions for manipulating maps.
    Map.get(%{:a => 1, 2 => :b}, :a)                                        # 1
    Map.put(%{:a => 1, 2 => :b}, :c, 3)                                     # %{2 => :b, :a => 1, :c => 3}
    Map.to_list(%{:a => 1, 2 => :b})                                        # [{2, :b}, {:a, 1}]
  # Maps have the following syntax for updating the value of a key.
     map = %{:a => 1, 2 => :b}                                              # %{2 => :b, :a => 1}
    %{map | 2 => "two"}                                                     # %{2 => "two", :a => 1}
    %{map | :c => 3}                                                        # ** (KeyError) key :c not found in: %{2 => :b, :a => 1}
  # When all the keys in a map are atoms, you can use the keyword syntax for your convenience.
    map = %{a: 1, b: 2}                                                     # %{a: 1, b: 2}
  # Another interesting property of maps is that they provide their own syntax for accessing atom keys.
    map = %{:a => 1, 2 => :b}                                               # %{2 => :b, :a => 1}
    map.a                                                                   # 1
    map.c                                                                   # ** (KeyError) key :c not found in: %{2 => :b, :a => 1}

Nested data structures
  # Elixir, offers services for the manipulation of hierarchical data structures through put_in / 2, update_in / 2 and other macros that provide the same comforts that you would find in imperative languages, while maintaining the immutable properties of the language.
    users = [
      john: %{name: "John", age: 27, languages: ["Erlang", "Ruby", "Elixir"]},
      mary: %{name: "Mary", age: 29, languages: ["Elixir", "F#", "Clojure"]}
    ]
  # If we wanted to access John's age, we could write:
    users[:john].age                                                        # 27
  # you can use this same syntax to update the value.
    users = put_in users[:john].age, 31                                     # [
                                                                              john: %{age: 31, languages: ["Erlang", "Ruby", "Elixir"], name: "John"},
                                                                              mary: %{age: 29, languages: ["Elixir", "F#", "Clojure"], name: "Mary"}
                                                                            ]
  # The update_in macro is similar but allows us to pass a function that controls how the value changes. For example, let's remove "Clojure" from Mary's list of languages.
  users = update_in users[:mary].languages, fn languages -> List.delete(languages, "Clojure") end
    # [
        john: %{age: 31, languages: ["Erlang", "Ruby", "Elixir"], name: "John"},
        mary: %{age: 29, languages: ["Elixir", "F#"], name: "Mary"}
      ]
  # Gets a value and updates a nested data structure using the given value path.
    users = %{"john" => %{age: 27}, "meg" => %{age: 23}}
    get_and_update_in(users["john"].age, &{&1, &1 + 1})                     # {27, %{"john" => %{age: 28}, "meg" => %{age: 23}}}















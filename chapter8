# Modules and functions
#   # To create our own modules in Elixir, we use the defmodule macro. We use the defmacro to define functions in that module.
#     defmodule Math do
#     ...>   def sum(a, b) do
#     ...>     a + b
#     ...>   end
#     ...> end
#     Math.sum(1, 2)                                                              # 3

defmodule Math do
  def sum(a, b) do
    a + b
  end
end

IO.puts Math.sum(1, 2)
# Elixir projects are usually organized into three directories:
   # _build - contains build artifacts
   # lib- contains Elixir code (usually .ex files)
   # test- contains tests (usually .exs files)

# Scripted mode
  # In addition to the Elixir .ex file extension, Elixir also supports .exs files for scripting. Elixir treats both files exactly the same, the only difference is in intent. .ex files are intended to be compiled while .exs files are used for scripting. This convention is followed by projects like mix.

# Named functions
  # Inside a module, we can define functions with def and private functions with defp. A function defined with def / 2 can be called from other modules, while a private function can only be called locally.
    defmodule Math do
      def sum(a, b) do
        do_sum(a, b)
      end

      defp do_sum(a, b) do
        a + b
      end
    end

    IO.puts Math.sum(1, 2)                                                    #=> 3
    IO.puts Math.do_sum(1, 2)                                                 #=> ** (UndefinedFunctionError)
  # Function declarations also support multiple clauses and guards. If a function has multiple clauses, Elixir will test each clause until it finds one that matches.
    defmodule Math do
      def zero?(0) do
        true
      end

      def zero?(x) when is_integer(x) do
        false
      end
    end

    IO.puts Math.zero?(0)                                                       #=> true
    IO.puts Math.zero?(1)                                                       #=> false
    IO.puts Math.zero?([1, 2, 3])                                               #=> ** (FunctionClauseError)
    IO.puts Math.zero?(0.0)                                                     #=> ** (FunctionClauseError)
      # The trailing question mark zero? Means that this function returns a Boolean value.
  # Similar to constructs like if, named functions support do: and do / end block syntax.
    defmodule Math do
      def zero?(0), do: true
      def zero?(x) when is_integer(x), do: false
    end

Function capturing
  # Throughout this tutorial, we have been using the name / arity notation to refer to functions. It so happens that this notation can be used to retrieve a named function as a function type. Start iex, by executing the math.exs file defined above.
    math.exs
    Math.zero?(0)                                                               #=> true
    fun = &Math.zero?/1                                                         #=> &Math.zero?/1
    is_function(fun)                                                            #=> true
    fun.(0)                                                                     #=> true
  # Local or imported functions, such as is_function, can be captured without the module.
    &is_function/1                                                              #=> &:erlang.is_function/1
    (&is_function/1).(fun)                                                      #=> true
  # the capture syntax can also be used as a shortcut for creating functions.
    fun = &(&1 + 1)                                                             #=> #Function<6.71889879/1 in :erl_eval.expr/5>
    fun.(1)                                                                     #=> 2
    fun2 = &"Good #{&1}"                                                        #=> #Function<6.127694169/1 in :erl_eval.expr/5>
    fun2.("morning")                                                            #=> "Good morning"
  # The & 1 represents the first argument passed to the function. & (& 1 + 1) above is exactly the same as fn x -> x + 1 end. The above syntax is useful for short definitions of functions.

Default arguments
  # Named functions in Elixir also support default arguments
    defmodule Concat do
      def join(a, b, sep \\ " ") do
        a <> sep <> b
      end
    end

    IO.puts Concat.join("Hello", "world")                                       #=> Hello world
    IO.puts Concat.join("Hello", "world", "_")                                  #=> Hello_world
  # Any expression is allowed to serve as the default value, but will not be evaluated during the definition of the function.
  # Every time the function is invoked and any of its default values must be used, the expression will be evaluated for that default value.
    defmodule DefaultTest do
      def dowork(x \\ "hello") do
        x
      end
    end

    DefaultTest.dowork                                                          #=> "hello"
    DefaultTest.dowork 123                                                      #=> 123
    DefaultTest.dowork                                                          #=> "hello"
  # If a function with default values has multiple clauses, you need to create a function header (a function definition without a body) to declare the default values.
    defmodule Concat do
      # A function head declaring defaults
      def join(a, b \\ nil, sep \\ " ")

      def join(a, b, _sep) when is_nil(b) do
        # The leading underscore _seps means that the variable will be ignored in this function
        a
      end

      def join(a, b, sep) do
        a <> sep <> b
      end
    end

    IO.puts Concat.join("Hello", "world")                                       #=> Hello world
    IO.puts Concat.join("Hello", "world", "_")                                  #=> Hello_world
    IO.puts Concat.join("Hello")                                                #=> Hello
  # When using default values, care must be taken to avoid overlapping function definitions.
    defmodule Concat do
      def join(a, b) do
        IO.puts "***First join"
        a <> b
      end

      def join(a, b, sep \\ " ") do
        IO.puts "***Second join"
        a <> sep <> b
      end
    end

    iex concat.ex
    Concat.join "Hello", "world"                                                #=> ***First join "Helloworld"
    Concat.join "Hello", "world", "_"                                           #=> ***Second join "Hello_world"
  # The compiler tells us that invoking the join function with two arguments will always choose the first join definition while the second will only be invoked when three arguments are passed.
